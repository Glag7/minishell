free_lst, exec_cmd, parse_cmd, do_cmd

pas de PATH ? 126

fork a 2 si pour exec
int	exec_pipeline()
{
	//TODO, parsing des pipelines, remplacement des variables des hdocs
	//if (mini->err == 0)
	//{
	//sig_mod(SIG_EXEC)//pas ici
	//start_exec
	//sig_mode(SIG_IGNORE);
	//}
	/*
	//while //par_open skip

	//pour chaque pipe
	//vars
	//word splitting
	//redirs
	//wdcards
	//replace var hdoc
	//do pipe if needed
	//do hdoc + redirs
	//extract cmand
	//do cmand
	//check sigsegv ?*/
	return (0);
}

//avant chaque pipeline gnl parse_quote, parse_var, strjoin (mieux), write

//fork
//find end
//if pipe pipe
//else exit code
//start fork



pas de prompt si pas tty ? + gnl ou readline ?

pour les heredocs pipe le remplaceur de variables a la commande ? catch le sigpipe
fd lecture, unlink, nouveau avec 2 fd, ecrire dedans


//126 not executable, 127 not found

integrer les builtins
SHLVL et PWD startup

signaux dans parsing (priorite : malloc, sig, erreur de parsing)
attention aux messages de parsing

$_ dans export oyu pas ?
mettre a minishell ou pas ?


cd: aller dans un dossier puis le supprimer

attention pour la fusion des chaines pebser a pas fusionner les chaines vides si y a un ws avant ou apres

signaux

$:
si juste $ ou nom invalide texte litteral

*:
quand * donne un fichier ca va sinon ambiguous redirect
quand pad de . devant pas afficher les ., sinon afficher les .
quand rien a afficher avec * affiche le texte litteral

chaine vide entre quotes est laissee
dans une variable pas laissee (sans quotes)

heredoc:
les variables sont pas interpretees pour le delimiteur, les * non plus
si il y a des guillemets qq part dans la chaine delimiteur (meme vide), alors pas expand les variables
pas expand *

les fichiers sont crees en premier mais dependent quand meme de leur pipeline (exemple || )
et de leure commande
ils sont crees en premier
les heredoc aussi


les fichiers sont crees dans l'ordre, ils s'arrete si probleme
redirection avant exec

return code : le return code est celui de waitpid, ou en cas de signal 128 + sig

la pipeline est cree avant les redirections
chaque commande d'une pipeline est un process separe

&& et || ont une precedende egale

expansion de variable puis word splitting puis filename xpansion
que le word splitting et le filaname expansion peuvent augmenter le nombre de mots
les arguments explicitements vides sont gardes
ceux pas explicitement nuls sont enleves (variables)

check les leaks
