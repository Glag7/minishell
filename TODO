FIX PARSING PARENTHESES
puis remove dup par (juste apres le parsing ?)

//126 not executable, 127 not found

integrer les builtins
SHLVL et PWD startup

signaux dans parsing (priorite : malloc, sig, erreur de parsing)
attention aux messages de parsing

$_ dans export oyu pas ?
mettre a minishell ou pas ?

SHLEVEL, gerer
PWD

mettre a jour les variables telles que SHELL ?

shlevel

split sur && ||, construire l'arbre (penser aux parentheses qui font des subtree)
une pipeline par branche, la pipeline est une liste chainee de char **(non) ou d'arbres binaires
ensuite (en meme temps en vrai) le parcourir et enlever les redirections et heredocs, puis mettre les ordres de remplacement

attention pour la fusion des chaines pebser a pas fusionner les chaines vides si y a un ws avant ou apres

signaux

$:
si juste $ ou nom invalide texte litteral

*:
quand * donne un fichier ca va sinon ambiguous redirect
quand pad de . devant pas afficher les ., sinon afficher les .
quand rien a afficher avec * affiche le texte litteral

chaine vide entre quotes est laissee
dans une variable pas laissee (sans quotes)

heredoc:
les variables sont pas interpretees pour le delimiteur, les * non plus
si il y a des guillemets qq part dans la chaine delimiteur (meme vide), alors pas expand les variables
pas expand *

les fichiers sont crees en premier mais dependent quand meme de leur pipeline (exemple || )
et de leure commande
ils sont crees en premier
les heredoc aussi


les fichiers sont crees dans l'ordre, ils s'arrete si probleme
redirection avant exec

return code : le return code est celui de waitpid, ou en cas de signal 128 + sig

la pipeline est cree avant les redirections
chaque commande d'une pipeline est un process separe

&& et || ont une precedende egale

expansion de variable puis word splitting puis filename xpansion
que le word splitting et le filaname expansion peuvent augmenter le nombre de mots
les arguments explicitements vides sont gardes
ceux pas explicitement nuls sont enleves (variables)
