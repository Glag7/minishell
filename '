/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   add_hdoc.c                                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: glaguyon <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/04/24 17:03:46 by glaguyon          #+#    #+#             */
/*   Updated: 2024/04/24 18:18:17 by glaguyon         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "minishell.h"

static int	add_prev(t_list **curr, t_tok **tok)
{
	t_list	*tmp;

	*tok = malloc(sizeof(**tok));
	tmp = ft_lstnew(*tok);
	if (*tok == NULL || tmp == NULL)
	{
		free(*tok);
		free(tmp);
		return (ERR_AINTNOWAY);
	}
	ft_lstinsert(curr, tmp, 0);
	return (0);
}

static int	add_lim(t_list *lst, t_tok *tok, size_t i, t_str *lim)
{
	size_t	size;
	t_list	*tmp;

	lim->s = malloc(lim->len + 1);
	if (lim->s == NULL)
		return (ERR_AINTNOWAY);
	size = ft_min(lim->len, tok->quote.str.len - i);
	ft_memcpy(lim->s, tok->quote.str.s + i, size);
	if (i + lim->len < tok->quote.str.len)
	{
		if (add_prev(&lst, &tok))
			return (ERR_AINTNOWAY);
		*tok = (t_tok){.tok = UNDEF, .quote = {.qtype = 0, .str = {((t_tok *)
				lst->content)->quote.str.s + i + lim->len, ((t_tok *)
				lst->content)->quote.str.len - i - lim->len}}};
	}
	lst = lst->next;
	while (size < lim->len)
	{
		size += ft_min(lim->len, tok->quote.str.len - i);
		ft_memcpy(lim->s, tok->quote.str.s + i, ft_min(lim->len, tok->quote.str.len - i));
		tmp = lst->next;
		ft_lstpop(&lst, &free, 0);
		lst = tmp;
	}
	return (0);
}

int	search_lim(t_list *lst, t_tok *tok, size_t i, t_hdoc *hdoc)
{
	t_list	*tmp;
	size_t	j;

	tmp = lst;
	while (i < tok->quote.str.len && ft_in(tok->quote.str.s[i], " \t\n") != -1)
		i++;
	if (i == tok->quote.str.len)
		tmp = tmp->next;
	while (tmp)
	{
		tok = (t_tok *)tmp->content;
		hdoc->expand &= (tok->quote.qtype) == 0;
		if (tok->quote.qtype)
			hdoc->lim.len += tok->quote.str.len;
		else
		{
			j = i * (tmp == lst);
			while (j < tok->quote.str.len
				&& ft_in(tok->quote.str.s[j], " \t\n") != -1)
				j++;
			if (j != tok->quote.str.len)
				break ;
			hdoc->lim.len += j;
			first = 0;
		}
		tmp = tmp->next;
	}
	printf("len is %zu\n", hdoc->lim.len);
	if (tmp == NULL)
		return (ERR_AINTNOWAY + 12345);
	tok = (t_tok *)lst->content;
	return (add_lim(lst, tok, i, &hdoc->lim));
}
